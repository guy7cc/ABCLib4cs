using ABCLib4cs.Algebra;
using ABCLib4cs.Data;
using static ABCLib4cs.IO.Scanner;
using static ABCLib4cs.IO.Writer;
using ABCLib4cs.Data.Struct;

namespace SubmissionCodes;

public class Program
{
    public static void Main()
    {
        ABCLib4cs.IO.Writer.Setup();
        Main2();
        ABCLib4cs.IO.Writer.Dispose();
    }

    public static void Main2()
    {
        var solver = new Solver();
        solver.Run();
    }

    public class Solver
    {
        private int N;

        private int M;

        private char[,] grid;

        private double[,] p;

        public void Run()
        {
            // --- ビームサーチのパラメータ ---
            const int BEAM_WIDTH = 5; // 各ターンで保持する候補の数
            const int EXPANSION_WIDTH = 10; // 各候補から展開する次善手の数

            // --- 1. 初期化 ---
            ReadInput();

            // 初期盤面を不変の原本として保存
            var initialGrid = (char[,])this.grid.Clone();

            // ビームサーチの初期状態を生成
            var initialState = new BeamState
            {
                Path = new List<(int r, int c)>(),
                Probabilities = this.p, // InitializeProbabilities()で設定済み
                MoveCache = CreateMoveCache(initialGrid),
                Score = 0
            };

            var beam = new List<BeamState> { initialState };
            int totalTurns = N * N - M;

            // --- 2. メインループ (全ターン実行) ---
            for (int i = 0; i < totalTurns; i++)
            {
                var nextBeamCandidates = new List<BeamState>();

                // --- a. 展開 (Expansion) ---
                foreach (var currentState in beam)
                {
                    // 親状態のGridを一度だけ復元
                    var currentGrid = ReconstructGrid(initialGrid, currentState.Path);

                    var nextProbs = CalculateNewProbabilities(currentState.Probabilities, currentState.MoveCache);
                    var bestMoves = FindTopKBestMoves(currentGrid, nextProbs, EXPANSION_WIDTH);

                    foreach (var move in bestMoves)
                    {
                        // 新しいGridを「親Gridのコピー」+「1マスの変更」で高速に生成
                        var newGrid = (char[,])currentGrid.Clone();
                        newGrid[move.r, move.c] = '#';

                        // 新しい状態(State)オブジェクトを生成
                        var newState = new BeamState
                        {
                            Path = new List<(int, int)>(currentState.Path) { move },
                            Probabilities = (double[,])currentState.Probabilities.Clone(),
                            MoveCache = ((int r, int c)[,,])currentState.MoveCache.Clone()
                        };
                        newState.Probabilities[move.r, move.c] = 0.0;

                        // 生成したnewGridを使ってキャッシュと評価を更新
                        PlaceRockAndUpdateCache(move.r, move.c, newGrid, newState.MoveCache);
                        newState.Score = EvaluateState(newState, newGrid, i);

                        nextBeamCandidates.Add(newState);
                    }
                }

                // --- b. 選択 (Selection) ---
                // 全候補の中から、スコアが高い上位BEAM_WIDTH個だけを次のビームとして残す
                beam = nextBeamCandidates.OrderByDescending(s => s.Score).Take(BEAM_WIDTH).ToList();
            }

            // --- 3. 結果の出力 ---
            if (beam.Any())
            {
                // 最終的に最もスコアが高かった状態の手順を出力
                var finalBestState = beam.First();
                foreach (var (r, c) in finalBestState.Path)
                {
                    Console.WriteLine($"{r} {c}");
                }
            }
        }

        /// <summary>
        /// 初期盤面と手順リストから、現在の盤面を復元します。
        /// </summary>
        /// <param name="initialGrid">ゲーム開始時の盤面。</param>
        /// <param name="path">現在までの手順。</param>
        /// <returns>復元された現在の盤面。</returns>
        private char[,] ReconstructGrid(char[,] initialGrid, List<(int r, int c)> path)
        {
            // 初期盤面をコピーし、その上に手順を適用する
            var currentGrid = (char[,])initialGrid.Clone();
            foreach (var move in path)
            {
                currentGrid[move.r, move.c] = '#';
            }

            return currentGrid;
        }

        // 1つの状態（探索候補）を管理するクラス
        public class BeamState
        {
            public List<(int r, int c)> Path { get; set; }
            public double[,] Probabilities { get; set; }
            public (int r, int c)[,,] MoveCache { get; set; }
            public double Score { get; set; }
        }

        private double EvaluateState(BeamState state, char[,] grid, int turn)
        {
            // --- 戦略指標を計算 ---
            // 1. 封じ込め度合い：連結成分が多いほど高評価
            //

            // 2. 確率の集中度合い：ジニ不純度が低い（値が0に近い）ほど高評価


            // --- 重み付けとスコア計算 ---
            // 例：序盤は封じ込めを重視し、終盤は確率の集中度を重視する
            //double w_containment = (turn < 1000) ? 100.0 : 10.0;
            //double w_concentration = (turn < 1000) ? 50.0 : 200.0;

            //if (turn < 1000)
            //{
            //    int components = CountConnectedComponents(grid);
            //    return components;
            //}
            //else
            //{
            double gini = CalculateGiniImpurity(state.Probabilities, grid);
            return -gini;
            //}
            //score += w_containment * components; // 封じ込め度が高いほどスコアUP
            //score -= w_concentration * gini; // 拡散している（ジニ不純度が高い）ほどスコアDOWN

            //score -= gini;

            // 他にも、期待値の合計などをスコアに含めることも可能
        }

        private void ReadInput()
        {
            N = I();
            M = I();
            grid = new char[N, N];
            for (int i = 0; i < N; i++)
            {
                string line = S();
                for (int j = 0; j < N; j++)
                {
                    grid[i, j] = line[j];
                }
            }

            InitializeProbabilities();
        }

        private void InitializeProbabilities()
        {
            p = new double[N, N];

            int emptyCellCount = N * N - M;

            double initialProbability = (emptyCellCount > 0) ? 1.0 / emptyCellCount : 0;

            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                {
                    if (grid[i, j] == '.')
                    {
                        p[i, j] = initialProbability;
                    }
                    else
                    {
                        p[i, j] = 0.0;
                    }
                }
            }
        }

        private (int r, int c)[,,] CreateMoveCache(char[,] currentGrid)
        {
            // キャッシュを格納する3次元配列
            var moveCache = new (int r, int c)[N, N, 4];

            // 盤面の全てのマス(r, c)を走査
            for (int r = 0; r < N; r++)
            {
                for (int c = 0; c < N; c++)
                {
                    // 開始マスが岩なら、そこからの移動は発生しないためスキップ
                    if (currentGrid[r, c] == '#')
                    {
                        continue;
                    }

                    // 4方向それぞれについて移動先を計算し、キャッシュに保存
                    for (int dir = 0; dir < 4; dir++)
                    {
                        moveCache[r, c, dir] = CalculateDestination(r, c, dir, currentGrid);
                    }
                }
            }

            return moveCache;
        }

        private void PlaceRockAndUpdateCache(int rockR, int rockC, char[,] grid, (int r, int c)[,,] moveCache)
        {
            // 1. Grid上に岩を配置
            grid[rockR, rockC] = '#';

            // 2. キャッシュの更新
            // 影響を受けるのは、新しい岩と同じ行(rockR)と列(rockC)にあるマスのみ

            // --- 影響を受ける「行」のキャッシュを更新 (左右移動) ---
            // rockR 行目にある各マス (rockR, j) からの左右移動を再計算
            for (int j = 0; j < N; j++)
            {
                // 更新対象マスが空きマスでなければスキップ
                if (grid[rockR, j] == '#') continue;

                // 方向 2:左, 3:右
                moveCache[rockR, j, 2] = CalculateDestination(rockR, j, 2, grid);
                moveCache[rockR, j, 3] = CalculateDestination(rockR, j, 3, grid);
            }

            // --- 影響を受ける「列」のキャッシュを更新 (上下移動) ---
            // rockC 列目にある各マス (i, rockC) からの上下移動を再計算
            for (int i = 0; i < N; i++)
            {
                // 更新対象マスが空きマスでなければスキップ
                if (grid[i, rockC] == '#') continue;

                // 方向 0:上, 1:下
                moveCache[i, rockC, 0] = CalculateDestination(i, rockC, 0, grid);
                moveCache[i, rockC, 1] = CalculateDestination(i, rockC, 1, grid);
            }
        }

        /// <summary>
        /// 指定されたマスから特定の方向に移動した際の最終到達点を計算するヘルパー関数。
        /// </summary>
        private (int r, int c) CalculateDestination(int startR, int startC, int dir, char[,] grid)
        {
            // 方向ベクトル (0:上, 1:下, 2:左, 3:右)
            int[] dr = { -1, 1, 0, 0 };
            int[] dc = { 0, 0, -1, 1 };

            int nextR = startR;
            int nextC = startC;
            while (true)
            {
                int tempR = nextR + dr[dir];
                int tempC = nextC + dc[dir];

                // 盤面の外か、または次のマスが岩なら、そこで停止
                if (tempR < 0 || tempR >= N || tempC < 0 || tempC >= N || grid[tempR, tempC] == '#')
                {
                    break;
                }

                nextR = tempR;
                nextC = tempC;
            }

            return (nextR, nextC);
        }

        /// <summary>
        /// 現在の確率分布と移動先キャッシュに基づき、ロボットが1回移動した後の
        /// 新しい確率分布を高速に計算します。
        /// </summary>
        /// <param name="currentProbs">現在の各マスにロボットが存在する確率が格納された配列。</param>
        /// <param name="moveCache">事前計算された移動先のキャッシュ配列。</param>
        /// <returns>移動後の新しい確率分布を格納した N x N 配列。</returns>
        private double[,] CalculateNewProbabilities(double[,] currentProbs, (int r, int c)[,,] moveCache)
        {
            // 新しい確率分布を格納する配列を0で初期化
            var newProbs = new double[N, N];

            // 盤面の全てのマス(r, c)を走査
            for (int r = 0; r < N; r++)
            {
                for (int c = 0; c < N; c++)
                {
                    // そのマスにロボットがいる確率が0なら、そこからの移動は発生しない
                    if (currentProbs[r, c] < 1e-18) // doubleの誤差を考慮
                    {
                        continue;
                    }

                    // 4方向への移動をキャッシュから取得して計算
                    for (int dir = 0; dir < 4; dir++)
                    {
                        // 📝 キャッシュからO(1)で移動先を取得
                        (int nextR, int nextC) = moveCache[r, c, dir];

                        // 移動先のマスに確率を加算
                        newProbs[nextR, nextC] += currentProbs[r, c] * 0.25;
                    }
                }
            }

            return newProbs;
        }

        private (int r, int c) SelectNextRockPlacement(
            char[,] grid,
            double[,] currentProbs,
            double[,] nextProbs)
        {
            // 候補となるマスの情報を格納するリスト
            var candidates = new List<(int r, int c, double currentProb, double eval)>();
            int[] dr = { 0, 0, 1, -1 };
            int[] dc = { 1, -1, 0, 0 };

            // 全ての空きマスを候補としてリストアップ
            for (int r = 0; r < N; r++)
            {
                for (int c = 0; c < N; c++)
                {
                    if (grid[r, c] == '.')
                    {
                        double eval = 0.0;
                        for (int k = 0; k < 4; k++)
                        {
                            int nr = r + dr[k];
                            int nc = c + dc[k];

                            // 盤面の内側であれば評価値を比較
                            if (nr >= 0 && nr < N && nc >= 0 && nc < N)
                            {
                                eval += currentProbs[nr, nc] * currentProbs[nr, nc];
                            }
                        }

                        candidates.Add((r, c, currentProbs[r, c], eval));
                    }
                }
            }

            // カスタムルールで候補をソート
            candidates.Sort((a, b) =>
            {
                // 第1優先: 現在の確率が小さい順 (昇順)
                int probComparison = a.currentProb.CompareTo(b.currentProb);
                if (probComparison != 0) return probComparison;

                // 第2優先: 隣接マスの評価値が大きい順 (降順)
                return b.eval.CompareTo(a.eval);
            });

            // 最も優先度の高い候補の座標を返す
            return (candidates[0].r, candidates[0].c);
        }

        /// <summary>
        /// 盤面内の空きマスが形成する連結成分の数を計算します。
        /// </summary>
        /// <param name="grid">現在の盤面。</param>
        /// <returns>連結成分の数。</returns>
        private int CountConnectedComponents(char[,] grid)
        {
            var visited = new bool[N, N];
            int componentCount = 0;

            for (int r = 0; r < N; r++)
            {
                for (int c = 0; c < N; c++)
                {
                    // まだ訪れていない空きマスがあれば、新しい連結成分としてカウント
                    if (grid[r, c] == '.' && !visited[r, c])
                    {
                        componentCount++;
                        // このマスから到達できる全てのマスを訪問済みにする
                        var queue = new Queue<(int r, int c)>();
                        queue.Enqueue((r, c));
                        visited[r, c] = true;

                        while (queue.Count > 0)
                        {
                            var (currR, currC) = queue.Dequeue();
                            int[] dr = { 0, 0, 1, -1 };
                            int[] dc = { 1, -1, 0, 0 };

                            for (int i = 0; i < 4; i++)
                            {
                                int nr = currR + dr[i];
                                int nc = currC + dc[i];

                                if (nr >= 0 && nr < N && nc >= 0 && nc < N &&
                                    grid[nr, nc] == '.' && !visited[nr, nc])
                                {
                                    visited[nr, nc] = true;
                                    queue.Enqueue((nr, nc));
                                }
                            }
                        }
                    }
                }
            }

            return componentCount;
        }

        /// <summary>
        /// 確率分布のジニ不純度を計算します。0に近いほど確率が集中しています。
        /// </summary>
        /// <param name="probabilities">現在の確率分布。</param>
        /// <param name="grid">現在の盤面。</param>
        /// <returns>ジニ不純度 (0.0～1.0)。</returns>
        private double CalculateGiniImpurity(double[,] probabilities, char[,] grid)
        {
            double sumOfSquares = 0.0;
            for (int r = 0; r < N; r++)
            {
                for (int c = 0; c < N; c++)
                {
                    if (grid[r, c] == '.')
                    {
                        double p = probabilities[r, c];
                        sumOfSquares += p * p;
                    }
                }
            }

            // 正規化されていない場合でも、集中度合いの指標として利用可能
            // return 1.0 - sumOfSquares;
            // 合計が1でない場合、1から引く意味が薄れるため、集中度の指標として-Σp^2を使うことも有効
            return -sumOfSquares;
        }

        /// <summary>
        /// 各マスへの移動元となるマスの数（In-Degree）を計算します。
        /// </summary>
        /// <param name="moveCache">移動先キャッシュ。</param>
        /// <returns>各マスのIn-Degreeを格納した2次元配列。</returns>
        private int[,] CalculateInDegrees((int r, int c)[,,] moveCache)
        {
            var inDegrees = new int[N, N];
            for (int r = 0; r < N; r++)
            {
                for (int c = 0; c < N; c++)
                {
                    // 岩マスからの移動はキャッシュにないので考慮不要
                    for (int dir = 0; dir < 4; dir++)
                    {
                        var (destR, destC) = moveCache[r, c, dir];
                        if (destR != -1) // -1などは未計算の印として使う場合
                        {
                            inDegrees[destR, destC]++;
                        }
                    }
                }
            }

            return inDegrees;
        }

        /// <summary>
/// 3段階の優先順位に基づき、次善手の上位K個を選択します。
/// </summary>
private List<(int r, int c)> FindTopKBestMoves(char[,] grid, double[,] nextProbs, int k)
{
    var maxHeap = new PriorityQueue<(int r, int c), MovePriority>(new ReverseComparer<MovePriority>());

    // 通常の隣接マスベクトル
    int[] dr = { 0, 0, 1, -1 };
    int[] dc = { 1, -1, 0, 0 };
    // 斜め隣接マスベクトル
    int[] ddr = { -1, -1, 1, 1 };
    int[] ddc = { -1, 1, -1, 1 };

    for (int r = 0; r < N; r++)
    {
        for (int c = 0; c < N; c++)
        {
            if (grid[r, c] == '.')
            {
                // --- 評価値を計算 ---
                // 第1優先キー
                double primaryProb = nextProbs[r, c];
                
                // 第2優先キー
                double neighborProbSum = 0.0;
                for (int i = 0; i < 4; i++)
                {
                    int nr = r + dr[i]; int nc = c + dc[i];
                    if (nr >= 0 && nr < N && nc >= 0 && nc < N)
                        neighborProbSum += nextProbs[nr, nc];
                }

                // ★追加点: 第3優先キー (斜め隣接の岩の数を数える)
                int diagonalRockCount = 0;
                for (int i = 0; i < 4; i++)
                {
                    int nr = r + ddr[i]; int nc = c + ddc[i];
                    if (nr >= 0 && nr < N && nc >= 0 && nc < N && grid[nr, nc] == '#')
                    {
                        diagonalRockCount++;
                    }
                }
                
                var currentPriority = new MovePriority(primaryProb, neighborProbSum, diagonalRockCount);

                // --- ヒープへの追加/入れ替え処理 (変更なし) ---
                if (maxHeap.Count < k)
                {
                    maxHeap.Enqueue((r, c), currentPriority);
                }
                else
                {
                    if (maxHeap.TryPeek(out _, out MovePriority worstPriorityInHeap))
                    {
                        if (currentPriority.CompareTo(worstPriorityInHeap) < 0)
                        {
                            maxHeap.Dequeue();
                            maxHeap.Enqueue((r, c), currentPriority);
                        }
                    }
                }
            }
        }
    }

    // --- 結果の返却 (変更なし) ---
    var bestMoves = new List<(int r, int c)>(maxHeap.Count);
    while (maxHeap.TryDequeue(out var move, out _))
    {
        bestMoves.Add(move);
    }
    return bestMoves;
}

// PriorityQueueを最大ヒープとして使うための比較ロジック反転クラス
        public class ReverseComparer<T> : IComparer<T> where T : IComparable<T>
        {
            public int Compare(T x, T y)
            {
                // 通常の比較結果を反転させる
                return y.CompareTo(x);
            }
        }

        // 3段階の優先度を表現するための専用の構造体
        public readonly struct MovePriority : IComparable<MovePriority>
        {
            public readonly double PrimaryProb { get; } // 第1優先キー
            public readonly double NeighborProbSum { get; } // 第2優先キー
            public readonly int DiagonalRockCount { get; } // 第3優先キー

            public MovePriority(double primaryProb, double neighborProbSum, int diagonalRockCount)
            {
                PrimaryProb = primaryProb;
                NeighborProbSum = neighborProbSum;
                DiagonalRockCount = diagonalRockCount;
            }

            // 3段階の比較ルールを定義
            public int CompareTo(MovePriority other)
            {
                // 第1優先: 自身の予測確率が低い順 (昇順)
                int primaryCompare = PrimaryProb.CompareTo(other.PrimaryProb);
                if (primaryCompare != 0) return primaryCompare;

                // 第2優先: 隣接マスの確率の和が大きい順 (降順)
                int secondaryCompare = other.NeighborProbSum.CompareTo(this.NeighborProbSum);
                if (secondaryCompare != 0) return secondaryCompare;

                // 第3優先: 斜め隣接の岩の数が多い順 (降順)
                return other.DiagonalRockCount.CompareTo(this.DiagonalRockCount);
            }
        }
    }
}