using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SubmissionCodes
{
    public class Program
    {
        static async Task Main(string[] args)
        {
            ABCLib4cs.Class1 obj1 = new ABCLib4cs.Class1();
            object nestedObj = new ABCLib4cs.Class1.NestedClass.InnerNestedClass();
            var val = ABCLib4cs.Class1.NestedClass.NestedConstant;
            System.Console.WriteLine(val);
            ABCLib4cs.IO.StreamScanner scanner = new ABCLib4cs.IO.StreamScanner(Console.OpenStandardOutput());
        }
    }
}

namespace ABCLib4cs
{
    public class Class1
    {
        public void DisplayPersonInfo()
        {
            ABCLib4cs.Models.Person person = new ABCLib4cs.Models.Person("Alice", 30);
            System.Console.WriteLine(person.ToString());
        }

        public void DisplayJobInfo()
        {
            ABCLib4cs.Models.Job job = new ABCLib4cs.Models.Job("Software Engineer", 80000);
            System.Console.WriteLine(job.ToString());
        }

        public static event System.Action<string> OnMessage;
        public class NestedClass
        {
            public const string NestedConstant = "Nested Constant Value";
            public static void DisplayNestedInfo()
            {
                System.Console.WriteLine("This is a nested class.");
            }

            public class InnerNestedClass
            {
                public static void DisplayInnerNestedInfo()
                {
                    System.Console.WriteLine("This is an inner nested class.");
                }
            }
        }
    }

    namespace Models
    {
        public class Person
        {
            public string Name { get; set; }
            public int Age { get; set; }

            public Person(string name, int age)
            {
                Name = name;
                Age = age;
            }

            public override string ToString()
            {
                return $"{Name}, {Age} years old";
            }
        }

        public class Job
        {
            public string Title { get; set; }
            public double Salary { get; set; }

            public Job(string title, double salary)
            {
                Title = title;
                Salary = salary;
            }

            public override string ToString()
            {
                return $"{Title} with a salary of {Salary:C}";
            }
        }
    }

    namespace IO
    {
        public class StreamScanner
        {
            public StreamScanner(Stream stream)
            {
                str = stream;
            }

            private readonly Stream str;
            private readonly byte[] buf = new byte[1024];
            private int len, ptr;
            public bool isEof = false;
            public bool IsEndOfStream
            {
                get
                {
                    return isEof;
                }
            }

            private byte read()
            {
                if (isEof)
                    throw new EndOfStreamException();
                if (ptr >= len)
                {
                    ptr = 0;
                    if ((len = str.Read(buf, 0, 1024)) <= 0)
                    {
                        isEof = true;
                        return 0;
                    }
                }

                return buf[ptr++];
            }

            public char Char()
            {
                byte b = 0;
                do b = read();
                while (b < 33 || 126 < b);
                return (char)b;
            }

            public string Scan()
            {
                var sb = new StringBuilder();
                for (var b = Char(); b >= 33 && b <= 126; b = (char)read())
                    sb.Append(b);
                return sb.ToString();
            }

            public long Long()
            {
                long ret = 0;
                byte b = 0;
                var ng = false;
                do b = read();
                while (b != '-' && (b < '0' || '9' < b));
                if (b == '-')
                {
                    ng = true;
                    b = read();
                }

                for (; true; b = read())
                {
                    if (b < '0' || '9' < b)
                        return ng ? -ret : ret;
                    else
                        ret = ret * 10 + b - '0';
                }
            }

            public int Integer()
            {
                return (int)Long();
            }

            public double Double()
            {
                return double.Parse(Scan(), CultureInfo.InvariantCulture);
            }
        }
    }
}